
package ecsite;

import java.awt.event.ItemEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class AdminLogInForm extends javax.swing.JFrame {

    DefaultListModel defaultListModel=new DefaultListModel();
    MyListModel myListModel=new MyListModel();
    Cr subCategoryObject=null;
    
    DefaultListModel defaultListModelForProduct=new DefaultListModel();
    MyListModel myListModelForProduct=new MyListModel();
    ProductRow productObject=null;
    
    static int INSERT_NEW_CATEGORY=1;
    static int UPDATE_CATEGORY=2;
    static int INSERT_NEW_SUB_CATEGORY=3;
    static int UPDATE_SUB_CATEGORY=4;
    static int INSERT_NEW_PRODUCT=5;
    static int UPDATE_PRODUCT=6;
    
    public AdminLogInForm() throws SQLException, ClassNotFoundException, Exception {
        initComponents();
        
        //my init
        
        ManagePanelTabbedPane.setVisible(false);
        CategoryUpdateButton.setEnabled(false);
        DeleteCategoryButton.setEnabled(false);
        getAllParentCategoryAndPopulateCategoryComboBox();
        SubCategoryDelete.setEnabled(false);
        SubCategoryUpdateButton.setEnabled(false);
        SubCategoryInsertButton.setEnabled(false);
        ProductDeleteButton.setEnabled(false);
        ProductUpdateButton.setEnabled(false);
        AddProductButton.setEnabled(false);
        
        //
        
        
        //CategoryListPanel.add(p);
        
        //LogInResult.setBorder(BorderFactory.createEmptyBorder());
        
        //AdminLogInFirstPanel.setPreferredSize(new Dimension(AdminLogInForm.));
        //System.out.println(AdminLogInFirstPanel.size());
        
        
        
    }
    
    public boolean mCheckLogIn(String Username, String Password) throws Exception
    {
        boolean result;
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;

        try 
        {
            callStmt = c.prepareCall("{? = call CHECKLOGIN(?,?)}");

            callStmt.setString(2, Username);
            callStmt.setString(3, Password);   

            callStmt.registerOutParameter(1, java.sql.Types.NUMERIC);
            callStmt.execute();
            System.out.println(callStmt.getInt(1));
            
            if(callStmt.getInt(1)==0)result=false;
            else result=true;
            
        } finally {
            callStmt.close();
            c.close();
        }
        
        return result;
    }
    
    public static Connection getOracleConnection() throws Exception 
    {
        String driver = "oracle.jdbc.OracleDriver";
        String url = "jdbc:oracle:thin:@localhost:1521:XE";
        String username = "XAMPP";
        String password = "123456";

        Class.forName(driver); // load Oracle driver
  
        Connection conn = DriverManager.getConnection(url, username, password);

        return conn;
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminLogInFirstPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        usenameField = new javax.swing.JTextField();
        logInButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        LogInResult = new javax.swing.JTextField();
        ManagePanelTabbedPane = new javax.swing.JTabbedPane();
        CategoryPanel = new javax.swing.JPanel();
        AddCategoryButton = new javax.swing.JButton();
        CategoryComboBox = new javax.swing.JComboBox();
        CategoryListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SubCategoryList = new javax.swing.JList();
        CategoryUpdateButton = new javax.swing.JButton();
        DeleteCategoryButton = new javax.swing.JButton();
        SubCategoryInsertButton = new javax.swing.JButton();
        SubCategoryDelete = new javax.swing.JButton();
        SubCategoryUpdateButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        NumberOfSubCategory = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ProductPanel = new javax.swing.JPanel();
        ProductUpdateButton = new javax.swing.JButton();
        ProductDeleteButton = new javax.swing.JButton();
        AddProductButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        NumberOfSameKindOfProduct = new javax.swing.JLabel();
        SubCategoryNameInProductView = new javax.swing.JLabel();
        ProductListPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ProductList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("BaseFrame"); // NOI18N
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        AdminLogInFirstPanel.setBackground(new java.awt.Color(0, 153, 153));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        usenameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        usenameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        logInButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        logInButton.setText("Log In");
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        passwordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        passwordField.setToolTipText("");
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addComponent(usenameField))
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(usenameField, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addComponent(logInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        LogInResult.setEditable(false);
        LogInResult.setBackground(new java.awt.Color(0, 153, 153));
        LogInResult.setFont(new java.awt.Font("Tahoma", 2, 15)); // NOI18N
        LogInResult.setForeground(new java.awt.Color(255, 255, 255));
        LogInResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LogInResult.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        LogInResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AdminLogInFirstPanelLayout = new javax.swing.GroupLayout(AdminLogInFirstPanel);
        AdminLogInFirstPanel.setLayout(AdminLogInFirstPanelLayout);
        AdminLogInFirstPanelLayout.setHorizontalGroup(
            AdminLogInFirstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminLogInFirstPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(LogInResult)
                .addGap(84, 84, 84))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminLogInFirstPanelLayout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(214, 214, 214))
        );
        AdminLogInFirstPanelLayout.setVerticalGroup(
            AdminLogInFirstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminLogInFirstPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(55, 55, 55)
                .addComponent(LogInResult, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addGap(39, 39, 39))
        );

        getContentPane().add(AdminLogInFirstPanel);

        ManagePanelTabbedPane.setBackground(new java.awt.Color(255, 51, 51));
        ManagePanelTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        ManagePanelTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ManagePanelTabbedPane.setFocusable(false);
        ManagePanelTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        ManagePanelTabbedPane.setMinimumSize(new java.awt.Dimension(180, 25));

        CategoryPanel.setBackground(new java.awt.Color(0, 153, 153));
        CategoryPanel.setToolTipText("");

        AddCategoryButton.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        AddCategoryButton.setText("+");
        AddCategoryButton.setBorderPainted(false);
        AddCategoryButton.setPreferredSize(new java.awt.Dimension(47, 37));
        AddCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCategoryButtonActionPerformed(evt);
            }
        });

        CategoryComboBox.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        CategoryComboBox.setPreferredSize(new java.awt.Dimension(75, 35));
        CategoryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CategoryComboBoxItemStateChanged(evt);
            }
        });

        CategoryListPanel.setBackground(new java.awt.Color(0, 153, 153));
        CategoryListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        SubCategoryList.setBackground(new java.awt.Color(0, 153, 153));
        SubCategoryList.setForeground(new java.awt.Color(51, 51, 255));
        SubCategoryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SubCategoryListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(SubCategoryList);

        javax.swing.GroupLayout CategoryListPanelLayout = new javax.swing.GroupLayout(CategoryListPanel);
        CategoryListPanel.setLayout(CategoryListPanelLayout);
        CategoryListPanelLayout.setHorizontalGroup(
            CategoryListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
        );
        CategoryListPanelLayout.setVerticalGroup(
            CategoryListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        CategoryUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        CategoryUpdateButton.setText("U");
        CategoryUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryUpdateButtonActionPerformed(evt);
            }
        });

        DeleteCategoryButton.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        DeleteCategoryButton.setText("-");
        DeleteCategoryButton.setPreferredSize(new java.awt.Dimension(47, 37));
        DeleteCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCategoryButtonActionPerformed(evt);
            }
        });

        SubCategoryInsertButton.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        SubCategoryInsertButton.setText("+");
        SubCategoryInsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubCategoryInsertButtonActionPerformed(evt);
            }
        });

        SubCategoryDelete.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        SubCategoryDelete.setText("-");
        SubCategoryDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubCategoryDeleteActionPerformed(evt);
            }
        });

        SubCategoryUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        SubCategoryUpdateButton.setText("U");
        SubCategoryUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubCategoryUpdateButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setPreferredSize(new java.awt.Dimension(40, 78));

        NumberOfSubCategory.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        NumberOfSubCategory.setForeground(new java.awt.Color(240, 240, 240));
        NumberOfSubCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NumberOfSubCategory.setText("0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sub");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(NumberOfSubCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NumberOfSubCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CategoryPanelLayout = new javax.swing.GroupLayout(CategoryPanel);
        CategoryPanel.setLayout(CategoryPanelLayout);
        CategoryPanelLayout.setHorizontalGroup(
            CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CategoryPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addComponent(CategoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(62, 62, 62)
                        .addComponent(AddCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CategoryListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(CategoryUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SubCategoryDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(SubCategoryInsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(SubCategoryUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        CategoryPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddCategoryButton, CategoryUpdateButton, DeleteCategoryButton, SubCategoryDelete, SubCategoryInsertButton, SubCategoryUpdateButton});

        CategoryPanelLayout.setVerticalGroup(
            CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoryPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(AddCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CategoryPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CategoryUpdateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DeleteCategoryButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(31, 31, 31)
                .addGroup(CategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addComponent(CategoryListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(27, 27, 27))
                    .addGroup(CategoryPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addComponent(SubCategoryInsertButton)
                        .addGap(29, 29, 29)
                        .addComponent(SubCategoryDelete)
                        .addGap(28, 28, 28)
                        .addComponent(SubCategoryUpdateButton)
                        .addGap(36, 36, 36))))
        );

        CategoryPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddCategoryButton, CategoryComboBox, CategoryUpdateButton, DeleteCategoryButton, SubCategoryDelete, SubCategoryInsertButton, SubCategoryUpdateButton});

        ManagePanelTabbedPane.addTab("  Category  ", CategoryPanel);

        ProductPanel.setBackground(new java.awt.Color(0, 153, 153));

        ProductUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ProductUpdateButton.setText("U");
        ProductUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductUpdateButtonActionPerformed(evt);
            }
        });

        ProductDeleteButton.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        ProductDeleteButton.setText("-");
        ProductDeleteButton.setPreferredSize(new java.awt.Dimension(47, 37));
        ProductDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductDeleteButtonActionPerformed(evt);
            }
        });

        AddProductButton.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        AddProductButton.setText("+");
        AddProductButton.setBorderPainted(false);
        AddProductButton.setPreferredSize(new java.awt.Dimension(47, 37));
        AddProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setPreferredSize(new java.awt.Dimension(40, 78));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Types");

        NumberOfSameKindOfProduct.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        NumberOfSameKindOfProduct.setForeground(new java.awt.Color(240, 240, 240));
        NumberOfSameKindOfProduct.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NumberOfSameKindOfProduct.setText("0");

        SubCategoryNameInProductView.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        SubCategoryNameInProductView.setForeground(new java.awt.Color(240, 240, 240));
        SubCategoryNameInProductView.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SubCategoryNameInProductView, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(NumberOfSameKindOfProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SubCategoryNameInProductView, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(NumberOfSameKindOfProduct)))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        ProductListPanel.setBackground(new java.awt.Color(0, 153, 153));
        ProductListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ProductList.setBackground(new java.awt.Color(0, 153, 153));
        ProductList.setForeground(new java.awt.Color(51, 51, 255));
        ProductList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ProductListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(ProductList);

        javax.swing.GroupLayout ProductListPanelLayout = new javax.swing.GroupLayout(ProductListPanel);
        ProductListPanel.setLayout(ProductListPanelLayout);
        ProductListPanelLayout.setHorizontalGroup(
            ProductListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
        );
        ProductListPanelLayout.setVerticalGroup(
            ProductListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ProductPanelLayout = new javax.swing.GroupLayout(ProductPanel);
        ProductPanel.setLayout(ProductPanelLayout);
        ProductPanelLayout.setHorizontalGroup(
            ProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ProductListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ProductPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ProductDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ProductUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );

        ProductPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddProductButton, ProductDeleteButton, ProductUpdateButton});

        ProductPanelLayout.setVerticalGroup(
            ProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(ProductUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(ProductDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProductListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        ProductPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddProductButton, ProductDeleteButton, ProductUpdateButton});

        ManagePanelTabbedPane.addTab("      Product      ", ProductPanel);

        getContentPane().add(ManagePanelTabbedPane);

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 3, 15)); // NOI18N

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogInResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogInResultActionPerformed

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButtonActionPerformed
        // TODO add your handling code here:
        
        String userName=usenameField.getText();
        String password=passwordField.getText();
        
        LogInResult.setText("");
        //LogInResult.setBorder(BorderFactory.createTitledBorder(""));
        
        try {
            if(mCheckLogIn(userName, password))LogInResult.setText("LogIn Successful");
            else LogInResult.setText("LogIn Failed.  !! Wrong username or password !!");
            
        } catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //ManagePanel.setVisible(true);
        ManagePanelTabbedPane.setVisible(true);
        AdminLogInFirstPanel.setVisible(false);
        
    }//GEN-LAST:event_logInButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        
        LogInResult.setText("");
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void DeleteCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCategoryButtonActionPerformed
        
        if(CategoryComboBox.getItemCount()>0)
        {
            try 
            {
                String selectedItem=CategoryComboBox.getSelectedItem().toString();
                if(!selectedItem.isEmpty())
                {
                    String message="If you delete this Category all Subcategory\nand Products will be deleted under this Category.\n\nDo you want to proceed ?";
                    int dialogResult = JOptionPane.showConfirmDialog(this, message, "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if(dialogResult == 0) 
                    {
                        deleteProductByDeletingCategory();
                        deleteCategory(selectedItem);
                    } 
                    
                }

            } catch (NullPointerException exception) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, exception);
                
            } catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_DeleteCategoryButtonActionPerformed

    public void deleteCategory(String categoryName) throws Exception
    {
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;
        try 
        {
            callStmt = c.prepareCall("{call DeleteCategory(?)}");
            callStmt.setString(1, categoryName);
            
            callStmt.execute();
  
        } finally {
            callStmt.close();
            c.close();
        }
        
        try 
        {
            getAllParentCategoryAndPopulateCategoryComboBox();
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteProductByDeletingCategory() throws SQLException, Exception
    {
        
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;
        
        int sizeOfSubCategory=defaultListModel.getSize();
        
        try 
        {
            for(int i=0; i<sizeOfSubCategory; i++)
            {
                Cr subCategoryRow=(Cr)defaultListModel.getElementAt(i);
                String scNameHere = subCategoryRow.getScName();

                callStmt = c.prepareCall("{call DeleteCategory(?)}");
                callStmt.setString(1, scNameHere);

                callStmt.execute();

            }
  
        } finally {
            callStmt.close();
            c.close();
        }
        
        try 
        {
            getAllParentCategoryAndPopulateCategoryComboBox();
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void AddCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategoryButtonActionPerformed
        
       
        if(SubCategoryList.getModel().getSize()>0)
        {
            Cr cr=(Cr)SubCategoryList.getModel().getElementAt(0);
        }
        
        String categoryName = "";
        String subCategoryName = "";
        String imageLink = "";
        String description = "";       
        
        CategoryUpdateForm categoryUpdateForm = new CategoryUpdateForm(categoryName, subCategoryName, imageLink, description, INSERT_NEW_CATEGORY);
        try 
        {
            getAllParentCategoryAndPopulateCategoryComboBox();
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_AddCategoryButtonActionPerformed

    private void CategoryUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryUpdateButtonActionPerformed

        if(SubCategoryList.getModel().getSize()>0)
        {
            Cr cr=(Cr)SubCategoryList.getModel().getElementAt(0);
        
        
            String categoryName = CategoryComboBox.getSelectedItem().toString();
            String subCategoryName = cr.scName;
            String imageLink = "";
            String description = "";       

            CategoryUpdateForm categoryUpdateForm = new CategoryUpdateForm(categoryName, subCategoryName, imageLink, description, UPDATE_CATEGORY);
            try 
            {
                getAllParentCategoryAndPopulateCategoryComboBox();
            } 
            catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CategoryUpdateButtonActionPerformed

    private void CategoryComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CategoryComboBoxItemStateChanged
        
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            try 
            {
                String selectedItem=CategoryComboBox.getSelectedItem().toString();
                defaultListModel.clear();
                getAllSubcategoryAndPopulateSubcategoryList(selectedItem);
                NumberOfSubCategory.setText(SubCategoryList.getModel().getSize()+"");
                
                CategoryUpdateButton.setEnabled(true);
                DeleteCategoryButton.setEnabled(true);
                SubCategoryInsertButton.setEnabled(true);

            } catch (NullPointerException exception) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, exception);
                SubCategoryInsertButton.setEnabled(false);
                CategoryUpdateButton.setEnabled(false);
                DeleteCategoryButton.setEnabled(false);
                
            } catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else 
        {
            NumberOfSubCategory.setText(0+"");
            SubCategoryInsertButton.setEnabled(false);
            CategoryUpdateButton.setEnabled(false);
            DeleteCategoryButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_CategoryComboBoxItemStateChanged

    private void SubCategoryInsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubCategoryInsertButtonActionPerformed
        
        if(!CategoryComboBox.getSelectedItem().toString().trim().isEmpty())
        {        
            String categoryName = CategoryComboBox.getSelectedItem().toString();
            String subCategoryName = "";
            String imageLink = "";
            String description = "";       

            CategoryUpdateForm categoryUpdateForm = new CategoryUpdateForm(categoryName, subCategoryName, imageLink, description, INSERT_NEW_SUB_CATEGORY);
            try 
            {
                getAllParentCategoryAndPopulateCategoryComboBox();
            } 
            catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
                try {
                    getAllSubcategoryAndPopulateSubcategoryList(categoryName);
                } catch (Exception ex1) {
                    Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }        
        }
        
    }//GEN-LAST:event_SubCategoryInsertButtonActionPerformed

    private void SubCategoryDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubCategoryDeleteActionPerformed
               
        if(CategoryComboBox.getItemCount()>0 && subCategoryObject!=null)
        {
            try 
            {
                String subCategoryName = subCategoryObject.scName;
                String imageLink = subCategoryObject.imageLink;
                String description =subCategoryObject.description;
                String selectedItem=CategoryComboBox.getSelectedItem().toString();

                if(!selectedItem.isEmpty())
                {
                    String message="If you delete this SubCategory all Products will be \ndeleted under this SubCategory.\n\nDo you want to proceed ?";
                    int dialogResult = JOptionPane.showConfirmDialog(this, message, "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if(dialogResult == 0) 
                    {
                        deleteCategory(subCategoryName);
                    } 
                    
                    subCategoryObject=null;
                }

            } catch (NullPointerException exception) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, exception);

            } catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            
            //System.out.println(subCategoryName+"<>"+description+"<>"+imageLink);
        
        
    }//GEN-LAST:event_SubCategoryDeleteActionPerformed

    private void SubCategoryUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubCategoryUpdateButtonActionPerformed
        
        if(subCategoryObject!=null)
        {
            String categoryName = CategoryComboBox.getSelectedItem().toString();
            String subCategoryName = subCategoryObject.scName;
            String imageLink = subCategoryObject.imageLink;
            String description =subCategoryObject.description;
            
            CategoryUpdateForm categoryUpdateForm = new CategoryUpdateForm(categoryName, subCategoryName, imageLink, description, UPDATE_SUB_CATEGORY);
            try 
            {
                getAllParentCategoryAndPopulateCategoryComboBox();
            } 
            catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println(subCategoryName+"<>"+description+"<>"+imageLink);
            subCategoryObject=null;
            //System.out.println(subCategoryName+"<>"+description+"<>"+imageLink);
        }
    }//GEN-LAST:event_SubCategoryUpdateButtonActionPerformed

    private void SubCategoryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SubCategoryListValueChanged
        
        if (evt.getValueIsAdjusting() == false)
        {
            int idx=SubCategoryList.getSelectedIndex();
            System.out.println("Selcted index : "+idx);
            
            if(idx>=0)
            {
                SubCategoryDelete.setEnabled(true);
                if(SubCategoryDelete.isEnabled())SubCategoryUpdateButton.setEnabled(true);
                else SubCategoryUpdateButton.setEnabled(false);
                subCategoryObject=(Cr) SubCategoryList.getModel().getElementAt(idx);
                
                try 
                {
                    getAllProductAndPopulateProductList(subCategoryObject.scName);
                    NumberOfSameKindOfProduct.setText(ProductList.getModel().getSize()+"");
                    AddProductButton.setEnabled(true);
                    SubCategoryNameInProductView.setText(subCategoryObject.scName + " : ");
                    ProductPanel.setEnabled(true);
                } 
                catch (Exception ex) {
                    Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            else
            {                
                SubCategoryDelete.setEnabled(false);
                SubCategoryUpdateButton.setEnabled(false);
                subCategoryObject=null;
                
                defaultListModelForProduct.clear();
                NumberOfSameKindOfProduct.setText(0+"");
                AddProductButton.setEnabled(false);
                SubCategoryNameInProductView.setText("");
                ProductPanel.setEnabled(false);
            }
        }
        else
        {
            //System.out.println("I think the value is adjusting");
        }
        
    }//GEN-LAST:event_SubCategoryListValueChanged

    private void ProductUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductUpdateButtonActionPerformed
        
        int TASK=UPDATE_PRODUCT;
        String subCategoryName = subCategoryObject.getScName();
        String adminUserName = "razu";
        String productName = productObject.getProductName();
        int productPrice = productObject.getUnitPrice();
        int productDiscount = productObject.getDoscount();
        int productFinalPrice = productObject.getFinalPrice();
        String productDescription = productObject.getProductDescription();
        String productImageLink = productObject.getProductImageLink();

        ProductUpdateForm productUpdateForm = new ProductUpdateForm(TASK, subCategoryName, adminUserName, productName, productPrice, productDiscount, productFinalPrice, productDescription, productImageLink);
        
        try 
        {
            getAllProductAndPopulateProductList(subCategoryName);
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ProductUpdateButtonActionPerformed

    private void ProductDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductDeleteButtonActionPerformed
        
        if(subCategoryObject!=null && productObject!=null)
        {
            try 
            {
                String productName = productObject.getProductName();
                int productId = productObject.getProductId();

                if(productId>0)
                {
                    String message="If you delete this Product all Product with different sizes under this Product will be \ndeleted under this SubCategory.\n\nDo you want to proceed ?";
                    int dialogResult = JOptionPane.showConfirmDialog(this, message, "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if(dialogResult == 0) 
                    {
                        deleteProduct(productId);
                    } 
                    
                    productObject=null;
                    getAllProductAndPopulateProductList(subCategoryObject.getScName());
                }

            } catch (NullPointerException exception) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, exception);

            } catch (Exception ex) {
                Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_ProductDeleteButtonActionPerformed

    public void deleteProduct(int productId) throws Exception
    {
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;
        try 
        {
            callStmt = c.prepareCall("{call DeleteProduct(?)}");
            callStmt.setInt(1, productId);
            
            callStmt.execute();
  
        } finally {
            callStmt.close();
            c.close();
        }
        
        try 
        {
                getAllProductAndPopulateProductList(subCategoryObject.getScName());
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void AddProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductButtonActionPerformed
        
        int TASK=INSERT_NEW_PRODUCT;
        String subCategoryName = subCategoryObject.getScName();
        String adminUserName = "razu";
        String productName ="";// productObject.getProductName();
        int productPrice=-1;//productObject.getUnitPrice();
        int productDiscount=-1;//productObject.getDoscount();
        int productFinalPrice=-1;//productObject.getFinalPrice();
        String productDescription = "";//productObject.getProductDescription();
        String productImageLink = "";//productObject.getProductImageLink();

        ProductUpdateForm productUpdateForm = new ProductUpdateForm(TASK, subCategoryName, adminUserName, productName, productPrice, productDiscount, productFinalPrice, productDescription, productImageLink);
        
        try 
        {
            getAllProductAndPopulateProductList(subCategoryName);
            
        } 
        catch (Exception ex) {
            Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_AddProductButtonActionPerformed

    private void ProductListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ProductListValueChanged
       
        if (evt.getValueIsAdjusting() == false)
        {
            int idx=ProductList.getSelectedIndex();
            System.out.println("Selcted index : "+idx);
            
            if(idx>=0)
            {
                ProductDeleteButton.setEnabled(true);
                if(ProductDeleteButton.isEnabled())ProductUpdateButton.setEnabled(true);
                else ProductUpdateButton.setEnabled(false);
                productObject=(ProductRow) ProductList.getModel().getElementAt(idx);
                
                try 
                {
                    //getAllProductAndPopulateProductList(subCategoryObject.scName);
                    //NumberOfSameKindOfProduct.setText(ProductList.getModel().getSize()+"");
                } 
                catch (Exception ex) {
                    Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            else
            {
                ProductDeleteButton.setEnabled(false);
                ProductUpdateButton.setEnabled(false);
                productObject=null;
            }
        }
        else
        {
            //System.out.println("I think the value is adjusting");
        }
        
    }//GEN-LAST:event_ProductListValueChanged

    //ProductId NUMBER(10), CategoryId NUMBER(10), ProductName VARCHAR2(30), ProductPicture VARCHAR2(200),
    //Discount NUMBER(5), UnitPrice NUMBER(5), FinalPrice NUMBER(5), ProductDescription VARCHAR2(200));
    public void getAllProductAndPopulateProductList(String category) throws SQLException, Exception 
    {
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;
        
        try 
        {
            defaultListModelForProduct.clear();
                
            callStmt = c.prepareCall("select * from table(GetAllProductOfCategory('"+category+"'))");
            ResultSet productResultSet=callStmt.executeQuery();
            
            while(productResultSet.next())
            {
                int productId=productResultSet.getInt(1);
                int categoryId=productResultSet.getInt(2);
                //int adminId=productResultSet.getInt(3);
                String productName=productResultSet.getString(3);
                String iconLink=productResultSet.getString(4);
                int doscount=productResultSet.getInt(5);
                int unitPrice=productResultSet.getInt(6);
                int finalPrice=productResultSet.getInt(7);               
                String productDescription=productResultSet.getString(8);
                              
                ImageIcon ic=new ImageIcon(iconLink);
                ProductRow productRow=new ProductRow(productId, categoryId, productName, ic, doscount, finalPrice, unitPrice, productDescription, iconLink);
                
                defaultListModelForProduct.addElement(productRow);
                ProductList.setCellRenderer(new ProductsListRenderer());
                ProductList.setModel(defaultListModelForProduct);           
                
                //System.out.println(name+"<>"+imageLink+"<>"+description);              
            } 
            
            NumberOfSameKindOfProduct.setText(ProductList.getModel().getSize()+"");
  
        } finally {
            callStmt.close();
            c.close();
        }
        
    }
    
    
    
    public void getAllSubcategoryAndPopulateSubcategoryList(String parent) throws SQLException, Exception 
    {
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;
        
        try 
        {
            
            callStmt = c.prepareCall("select * from table(GetAllSubCategory('"+parent+"'))");
            ResultSet subCategoryResultSet=callStmt.executeQuery();
            
            while(subCategoryResultSet.next())
            {
                String name = subCategoryResultSet.getString(2);
                String imageLink = subCategoryResultSet.getString(3);
                String description = subCategoryResultSet.getString(4);              
                ImageIcon ic=new ImageIcon(imageLink);
         
                defaultListModel.addElement(new Cr(name, description, ic, imageLink));
                SubCategoryList.setCellRenderer(new myListRenderer());
                SubCategoryList.setModel(defaultListModel);           
                
                //System.out.println(name+"<>"+imageLink+"<>"+description);              
            } 
  
        } finally {
            callStmt.close();
            c.close();
        }
        
    }
    
    
    public void getAllParentCategoryAndPopulateCategoryComboBox() throws SQLException, Exception
    {
        Connection c=getOracleConnection();
        CallableStatement callStmt = null;

        CategoryComboBox.removeAllItems();
        SubCategoryList.removeAll();
        try 
        {
            callStmt = c.prepareCall("select * from table(GetAllParentCategory)");
            ResultSet rs=callStmt.executeQuery();
            
            while(rs.next()){
                String ss = rs.getString(2);
                CategoryComboBox.addItem(ss);
            }           
            
        } finally {
            callStmt.close();
            c.close();
        }
        
    }
    
    
    

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminLogInForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminLogInForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminLogInForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminLogInForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    new AdminLogInForm().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(AdminLogInForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCategoryButton;
    private javax.swing.JButton AddProductButton;
    private javax.swing.JPanel AdminLogInFirstPanel;
    private javax.swing.JComboBox CategoryComboBox;
    private javax.swing.JPanel CategoryListPanel;
    private javax.swing.JPanel CategoryPanel;
    private javax.swing.JButton CategoryUpdateButton;
    private javax.swing.JButton DeleteCategoryButton;
    private javax.swing.JTextField LogInResult;
    private javax.swing.JTabbedPane ManagePanelTabbedPane;
    private javax.swing.JLabel NumberOfSameKindOfProduct;
    private javax.swing.JLabel NumberOfSubCategory;
    private javax.swing.JButton ProductDeleteButton;
    private javax.swing.JList ProductList;
    private javax.swing.JPanel ProductListPanel;
    private javax.swing.JPanel ProductPanel;
    private javax.swing.JButton ProductUpdateButton;
    private javax.swing.JButton SubCategoryDelete;
    private javax.swing.JButton SubCategoryInsertButton;
    private javax.swing.JList SubCategoryList;
    private javax.swing.JLabel SubCategoryNameInProductView;
    private javax.swing.JButton SubCategoryUpdateButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logInButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usenameField;
    // End of variables declaration//GEN-END:variables
}
